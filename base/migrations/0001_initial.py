# Generated by Django 4.1.4 on 2022-12-09 15:12

import colorfield.fields
from django.db import migrations, models
import django.db.models.deletion
import django_better_admin_arrayfield.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Art',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_id', models.CharField(max_length=256, unique=True)),
                ('image', models.ImageField(max_length=512, upload_to='arts/')),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_id', models.CharField(max_length=256, unique=True)),
                ('name', models.CharField(max_length=128)),
                ('aliases', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(max_length=128), blank=True, null=True, size=None)),
                ('artist_types', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(choices=[('musician', 'Musician'), ('composer', 'Composer'), ('lyricist', 'Lyricist'), ('vocalist', 'Vocalist'), ('instrumentalist', 'Instrumentalist'), ('arranger', 'Arranger'), ('producer', 'Producer'), ('artist', 'Artist'), ('organizer', 'Organizer'), ('idea', 'Idea'), ('writer', 'Writer'), ('director', 'Director'), ('engineer', 'Engineer'), ('other', 'Other')], default=['musician'], max_length=30), size=None)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Commentary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_id', models.CharField(max_length=256, unique=True)),
                ('text', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_id', models.CharField(max_length=256, unique=True)),
                ('name', models.CharField(max_length=256)),
                ('file', models.FileField(upload_to='files/')),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(max_length=512)),
                ('is_dead', models.BooleanField(default=False)),
                ('link_type', models.CharField(choices=[('youtube', 'Youtube'), ('twitter', 'Twitter'), ('instagram', 'Instagram'), ('tumblr', 'Tumblr'), ('website', 'Website'), ('bandcamp', 'Bandcamp'), ('soundcloud', 'Soundcloud'), ('bgreco', 'Bgreco.net archive'), ('spotify', 'Spotify'), ('other', 'Other')], default='website', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_id', models.CharField(max_length=256, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('color', colorfield.fields.ColorField(default='#FFFFFF', image_field=None, max_length=18, samples=None)),
                ('date', models.DateField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, max_length=512, null=True, upload_to='medias/')),
                ('commentary', models.ManyToManyField(blank=True, related_name='medias', to='base.commentary')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_id', models.CharField(max_length=256, unique=True)),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True, null=True)),
                ('color', colorfield.fields.ColorField(default='#FFFFFF', image_field=None, max_length=18, samples=None)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaArtist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artist_type', models.CharField(choices=[('musician', 'Musician'), ('composer', 'Composer'), ('lyricist', 'Lyricist'), ('vocalist', 'Vocalist'), ('instrumentalist', 'Instrumentalist'), ('arranger', 'Arranger'), ('producer', 'Producer'), ('artist', 'Artist'), ('organizer', 'Organizer'), ('idea', 'Idea'), ('writer', 'Writer'), ('director', 'Director'), ('engineer', 'Engineer'), ('other', 'Other')], default='artist', max_length=30)),
                ('notes', models.TextField(blank=True, null=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.artist')),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.media')),
            ],
        ),
    ]
